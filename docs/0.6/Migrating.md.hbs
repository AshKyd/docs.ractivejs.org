---
title: 'Migrating to 0.6.x'
---

These migration notes are cribbed from the [CHANGELOG](https://github.com/ractivejs/ractive/blob/dev/CHANGELOG.md). While we strive to minimise breaking changes, and to highlight the ones we do introduce, if you discover an undocumented breaking change please edit this page.


## Migrating from 0.5.x

Ractive instances now emit *lifecycle events*. If you use `Ractive.extend(...)` with `init()`, `beforeInit()` or `complete()`, you should replace them with `onrender()`, `onconstruct()`, and `oncomplete()` respectively - they will continue to work, but will be removed in a future version. See the {{{createLink 'lifecycle events'}}} page for more detail.


### Breaking changes

* `new Ractive()` now inherits all options as methods/properties including event hooks.
* The deprecated `init()` function (see below) is mapped to `onrender()` and will fire more than once, and no longer contains options argument
* New reserved events - 'change', 'config', 'construct', 'init', 'render', 'reset', 'teardown', 'unrender', 'update'
* Setting uninitialised data on a component will no longer cause it to leak out into the parent scope
* 'Smart updates', via `ractive.merge()` and `ractive.shift()` etc, work across component boundaries
* Use of other elements besides `<script>` for templates is an error
* Removed CSS length interpolator


## Migrating from 0.4.x

### Breaking changes

* errors in observers and evaluators are no longer caught
* Nodes are detached as soon as any outro transitions are complete (if any), rather than when *all* transitions are complete
* The options argument of `init: function(options)` is now strictly what was passed into the constructor, use `this.option` to access configured value.
* `data` with properties on prototype are no longer cloned when accessed. `data` from "baseClass" is no longer deconstructed and copied.
* Options specified on component constructors will not be picked up as defaults. `debug` now on `defaults`, not constructor
* Select bindings follow general browser rules for choosing options. Disabled options have no value.
* Input values are not coerced to numbers, unless input type is `number` or `range`
* `\{{this.foo}}` in templates now means same thing as `\{{.foo}}`
* Rendering to an element already render by Ractive causes that element to be torn down (unless appending).
* Illegal javascript no longer allowed by parser in expressions and will throw
* Parsed template format changed to specify template spec version.
	* Proxy-event representation
	* Non-dynamic (bound) fragments of html are no longer stored as single string
	* See https://github.com/ractivejs/template-spec for current spec.
* Arrays being observed via `array.*` no longer send `item.length` event on mutation changes
* Reserved event names in templates ('change', 'config', 'construct', 'init', 'render', 'reset', 'teardown', 'unrender', 'update') will cause the parser to throw an error
* `\{{else}}` support in both handlebars-style blocks and regular mustache conditional blocks, but is now a restricted keyword that cannot be used as a regular reference
* Child components are created in data order
* Reference expressions resolve left to right and follow same logic as regular mustache references (bind to root, not context, if left-most part is unresolved).
* Improved attribute parsing and handling:
	* character escaping and whitespace handling in attribute directive arguments
	* boolean and empty string attributes