---
title: Overview
section: APIReference
---
## Initialisation

To create a new Ractive instance, simply instantiate one using `new Ractive({...})`
and supply the desired options:

```js
var ractive = new Ractive({
  el: 'container',
  template: '<p>\{{greeting}}, \{{recipient}}!</p>',
  data: { greeting: 'Hello', recipient: 'world' }
});
```

While there are no _required_ options, the three show above: __el__ement, __template__ and __data__
are the most common. They specify the data to bind to the template and where it should be placed
in the document.

The full list of initialisation options is {{{createLink 'Initialisation options' 'covered here'}}}.

## Default Options

Most of the {{{createLink 'Initialisation options' 'initialisation options'}}} can be assigned
to the `Ractive.defaults` property and will be used on any future created instances.
If the same option is supplied during initialisation, it will override the default:

```js
Ractive.defaults.delimiters = [ '[[', ']]' ];

ractive1 = new Ractive({
	template: 'hello [[world]]`
});

rative2 = new Ractive({
	template: 'hello //world\\`,
	delimiters: [ '//', '\\' ]
});
```

The exception is for {{{createLink 'Plugins' 'plugin registries'}}} which, for convience sake, are
'registered' directly on `Ractive`. Also, when provided as initialisation options, they do
not replace, but rather combine with globally registered (default) options:

```js
Ractive.components.myComponent = MyComponent;

ractive1 = new Ractive({});
// ractive1.components has MyComponent

ractive2 = new Ractive({
	components: {
		otherComponent: OtherComponent
	}
});
// ractive2.components has MyComponent _and_ OtherComponent
```

The `data` and `computed` options, while set on `Ractive.defaults`, also combine values rather
than replace. See {{{ createLink '' 'registries' }}} for more detials.

## Extending Ractive

Default options can also be provided using {{{ createLink 'Ractive.extend()' }}}. While the result
is a fully instantiable on its own, the main value is that they can then be used as components
within your templates:

```js
var MyRactive = Ractive.extend({
	template: 'I can be instantiated _or_ be a component!'
});

var ractive = new MyRactive({
	el: 'container'
});

var ractive2 = Ractive({
	el: 'container2',
	template: '<widget/>',
	components: {
		widget: MyRactive
	}
});
```
See blah for more detail.




