---
title: 'Proxy events'
---

*See also: {{{createLink 'method calls' 'method calls from templates'}}}*

Ractive has a concept of *proxy events*, which translate a user *action* (e.g. a mouseclick) into an *intention* (e.g. 'select this option'). This allows you to handle user interaction in a readable, declarative fashion, without resorting to peppering your markup with class names to use as 'hooks' (which must then be kept consistent between your markup and your JavaScript code).

As with all events in Ractive, you subscribe with {{{createLink 'ractive.on()'}}}:

```js
ractive = new Ractive({
  el: 'body',
  template: '<button on-click="activate">click me!</button>'
});

ractive.on( 'activate', function ( event ) {
  alert( 'Activating!' );
});
```


## Event arguments

We might want to pass arguments to our handler in addition to the `event` object (see below). We can do that by listing them, comma-separated, after the event name:

```html
<h1>Let's shop!</h1>
<ul>
  \{{#each items: i}}
    <li>
      <p>\{{i+1}}: \{{description}}</p>
      <label><input value='\{{qty}}'> Quantity</label>

      <!-- when the user clicks this button, add {\{qty}} of this item -->
      <button on-click='addToCart:\{{this}},\{{qty}}'>Add to cart</button>
    </li>
  \{{/each}}
</ul>
```

```js
ractive.on( 'addToCart', function ( event, item, qty ) {
  /* code goes here */
});
```


## The `event` object

The first argument to a proxy event handler is always a Ractive `event` object (you can also use `this.event` - they are the same). It contains various properties:

* `event.name` - the name of the event, in this case 'activate'
* `event.node` - the DOM node in question
* `event.keypath` - the {{{createLink 'Keypaths' 'keypath'}}} of the current context
* `event.context` - the value of `this.get(event.keypath)`
* `event.index` - a map of index references

In the example above, `event.keypath` might be `items.0` for the first item in the list, `items.1` for the second, and so on. The `event.index` map would have a property `i`, which would correspond to those indices.


## Custom events

In addition to all the usual DOM events, you can use *custom events* via {{{createLink 'plugins' 'event plugins'}}}. For example, you could add gesture support to your app with [ractive-touch](https://github.com/rstacruz/ractive-touch), which integrates [Hammer.js](http://hammerjs.github.io/) with Ractive.


## Chained proxy events

You can assign the same proxy event to multiple DOM events by separating them with a hyphen:

```html
<div on-mouseover-mousemove='trigger'>...</div>
```


## Reserved event names

Note: the built-in {{{createLink 'lifecycle events'}}} are **reserved**, which means you can't use their names as proxy events.
